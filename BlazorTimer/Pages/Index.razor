@page "/"
@using ActualLab.CommandR
@using BlazorTimer.Modals
@using BlazorTimer.Services
@using System.Net.NetworkInformation;
@using BlazorTimer.Services.DTOs
@inject IJSRuntime JS
@inherits ComputedStateComponent<(TimeSpan EllipsedTime, TimeSpan Duration, DateTime StartedTime)>

<p class="text-center fs-4">Timer</p>

<div class="w-25 mx-auto">

    <p @onclick=OnModalOpen class="fs-2 text-center h-25 rounded-circle mx-auto bg-black d-flex align-items-center justify-content-center text-white" style="min-height: 200px; width: 200px">
        @elapsedTimeFormatted
    </p>

    <div class="d-flex w-100 justify-content-between gx-1">
        <p @onclick="StartTimer" class="" disabled="@isRunning">
            Start time: @initializedTime.TimeOfDay.ToString(@"hh\:mm\:ss")
        </p>

        <p @onclick="StartTimer" class="" disabled="@isRunning">
            End time: @CalculateEndTime().ToString(@"hh\:mm\:ss")
        </p>
    </div>

    <div class="progress w-full my-2">
        <div class="progress-bar bg-black" style="width: @($"{CalculateProgressPercentage()}%")" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
    </div>


    <div class="d-flex w-100 justify-content-between gx-1">
        <button @onclick="StartTimer" class="btn btn-success" disabled="@isRunning">
            <span class="oi oi-media-play" aria-hidden="true"></span>
            Start
        </button>
        <button @onclick="StopTimer" class="btn btn-outline-danger" disabled="@(isRunning == false)">
            <span class="oi oi-media-pause" aria-hidden="true"></span>
            Stop
        </button>
    </div>
</div>

<h4 class="text-center mt-4">History</h4>
<table class="table table-sm table-striped w-50 mx-auto text-center mt-4">
    <thead class="table-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Start time</th>
            <th scope="col">End time</th>
            <th scope="col">Status</th>
            
        </tr>
    </thead>
    <tbody>
        @{
            int i = 1;
        }
        @foreach (var item in history)
        {
            <tr>
                <th scope="row">@i</th>
                <td>@item.StartTime</td>
                <td>@item.EndTime</td>
                <td>@item.Status</td>
            </tr>
            i++;
        }
    </tbody>
</table>

<div class="modal fade @(hasModalVisible ? "show d-block" : "")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Set timer duration</h5>
                <button @onclick=OnModalClose type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <TimeSpanPicker @bind-TimeSpanValue="SelectedTimeSpan" TimeSpanFormat="hh\:mm\:ss" TimeSpanFormatPlaceholder="hh\:mm\:ss" />

            </div>
            <div class="modal-footer">
                <button @onclick=OnModalClose type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button @onclick=OnModalSaved type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code {
    #region Private Fields

    [Inject] private ITimerService TimerService { get; init; }
    private bool isRunning;
    private TimeSpan elapsedTime;
    private DateTime startTime;
    private DateTime initializedTime;
    private bool hasModalVisible;
    private Timer? timer;
    private string macAddress;
    private string elapsedTimeFormatted => $"{elapsedTime.Hours:D2}:{elapsedTime.Minutes:D2}:{elapsedTime.Seconds:D2}";
    private IEnumerable<TimerInfo> history = Enumerable.Empty<TimerInfo>();

    #endregion

    #region Timer Setup and Commands Section

    private void StartTimer()
    {

        if (SelectedTimeSpan == TimeSpan.Zero)
        {
            OnModalOpen();
            //isRunning = true;
        }

        if (!isRunning)
        {
            startTime = DateTime.Now - elapsedTime;
            initializedTime = DateTime.Now - elapsedTime;
            timer = new Timer(UpdateElapsedTime, null, 5, 10); // Update every second
            isRunning = true;
        }
    }

    private void StopTimer()
    {
        if (isRunning)
        {
            timer?.Dispose();
            elapsedTime = DateTime.Now - startTime;
            isRunning = false;
        }

        InvokeAsync(StateHasChanged);
    }

    private void UpdateElapsedTime(object? state)
    {
        elapsedTime = DateTime.Now - startTime;
        ComputeState(default).ConfigureAwait(false);

        if (elapsedTime >= SelectedTimeSpan)
        {
            StopTimer(); // Stop the timer if the elapsed time meets or exceeds the selected time span
            SaveTimer();
            elapsedTime = SelectedTimeSpan; // Ensure the display matches the selected time span when stopping
            SelectedTimeSpan = TimeSpan.Zero;

        }

        InvokeAsync(StateHasChanged); // Refresh the UI
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private double CalculateProgressPercentage()
    {
        if (SelectedTimeSpan.TotalSeconds == 0)
            return 0;

        return Math.Min((elapsedTime.TotalSeconds / SelectedTimeSpan.TotalSeconds) * 100, 100);
    }

    private DateTime CalculateEndTime()
    {
        return DateTime.Now + (SelectedTimeSpan - elapsedTime);
    }

    private string GetMacAddress()
    {
        var networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
        foreach (var networkInterface in networkInterfaces)
        {
            if (networkInterface.NetworkInterfaceType != NetworkInterfaceType.Ethernet &&
                networkInterface.NetworkInterfaceType != NetworkInterfaceType.Wireless80211)
            {
                continue;
            }

            if (networkInterface.OperationalStatus == OperationalStatus.Up)
            {
                var physicalAddress = networkInterface.GetPhysicalAddress();
                return string.Join(":", physicalAddress.GetAddressBytes().Select(b => b.ToString("X2")));
            }
        }

        return string.Empty;
    }

  
    #endregion

    #region TimePicker

    private TimeSpan SelectedTimeSpan { get; set; } = TimeSpan.Zero;

    #endregion

    #region Modal

    private void OnModalClose()
    {
        SelectedTimeSpan = TimeSpan.Zero;
        hasModalVisible = false;
        StateHasChanged();
    }

    private void OnModalOpen()
    {
        hasModalVisible = true;
        StateHasChanged();
    }

    private void OnModalSaved()
    {
        hasModalVisible = false;
        StateHasChanged();
    }

    #endregion

    #region DataBinding

    protected override ComputedState<(TimeSpan EllipsedTime, TimeSpan Duration, DateTime StartedTime)>.Options GetStateOptions()
        => new() { InitialValue = (TimeSpan.Zero, TimeSpan.Zero, DateTime.MinValue) };

    protected override async Task<(TimeSpan EllipsedTime, TimeSpan Duration, DateTime StartedTime)> ComputeState(CancellationToken cancellationToken)
    {
        return (elapsedTime, SelectedTimeSpan, startTime);
    }

    protected override async Task OnInitializedAsync()
    {
        macAddress = GetMacAddress();
        history = TimerService.GetAllAsync(x => x.MAC == macAddress );
        await State.Update();
    }


    private void SaveTimer()
        {
        // Call save time data
        var time = new TimerInfoForCreation() { MAC = macAddress, StartTime = startTime, EndTime = DateTime.Now ,Status = Status.completed}; // started time
        if (time.StartTime.Second != time.EndTime.Second)
        {
            TimerService.SaveAsync(time);
            ReloadPage();
        }
    }
    
    private async Task ReloadPage()
    {
        await JS.InvokeVoidAsync("location.reload");
    }
    
    #endregion
}